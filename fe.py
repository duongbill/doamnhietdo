import streamlit as st
import requests
import pandas as pd
import json
import time
import pytz
import os 
from urllib.request import Request, urlopen # D√πng ƒë·ªÉ g·ªçi API

# --- C·∫§U H√åNH TIMEZONE ---
VN_TIMEZONE = pytz.timezone('Asia/Ho_Chi_Minh')

# --- TH√îNG S·ªê C·∫§U H√åNH THINGSPEAK ---
# L∆ØU √ù: ƒê√ÇY L√Ä READ API KEY, KH√îNG PH·∫¢I WRITE API KEY
CHANNEL_ID = "3096685"
READ_API_KEY = "XS2B689LXUN4I8LF"
THING_SPEAK_URL = f"https://api.thingspeak.com/channels/{CHANNEL_ID}/feeds.json?api_key={READ_API_KEY}&results=20"

# --- C·∫§U H√åNH GEMINI AI ---
# VUI L√íNG THAY TH·∫æ CHU·ªñI N√ÄY B·∫∞NG API KEY TH·ª∞C T·∫æ C·ª¶A B·∫†N
GEMINI_API_KEY = "AIzaSyD39L0UrCXvMucZSJyd-MoyyZWLGWyVrJg"
GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent"
SYSTEM_PROMPT = "B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ ki·ªÉm so√°t kh√≠ h·∫≠u. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch d·ªØ li·ªáu m√¥i tr∆∞·ªùng hi·ªán t·∫°i v√† ƒë∆∞a ra c√°c g·ª£i √Ω h√†nh ƒë·ªông ƒë·ªÉ t·ªëi ∆∞u h√≥a s·ª± tho·∫£i m√°i. Khi tr√≤ chuy·ªán, h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø ƒë∆∞·ª£c cung c·∫•p."

# Ki·ªÉm tra v√† kh·ªüi t·∫°o l·ªãch s·ª≠ chat (cho t√≠nh nƒÉng Chatbot)
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "model", "parts": [{"text": "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI Kh√≠ h·∫≠u. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m hi·ªán t·∫°i, ho·∫∑c c√°c c√°ch c·∫£i thi·ªán m√¥i tr∆∞·ªùng ph√≤ng."}]}]
if "latest_climate_data" not in st.session_state:
    st.session_state["latest_climate_data"] = {}

st.set_page_config(
    page_title="Gi√°m s√°t ESP32 & DHT22 (ThingSpeak)",
    layout="wide"
)

def calculate_discomfort_index(temp, hum_percent):
    """T√≠nh to√°n Ch·ªâ s·ªë Kh√≥ ch·ªãu (DI) d·ª±a tr√™n nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m."""
    try:
        H_ratio = hum_percent / 100.0 
        DI = temp - (0.55 - 0.55 * H_ratio) * (temp - 14.5)
        return DI
    except Exception:
        return None

def generate_ai_suggestion(temp, hum, di_index):
    """G·ªçi Gemini API cho G·ª¢I √ù T·ª∞ ƒê·ªòNG."""
    if GEMINI_API_KEY == "ƒê·∫∂T KH√ìA API C·ª¶A B·∫†N V√ÄO ƒê√ÇY":
        return "‚ö†Ô∏è C·∫£nh b√°o: Vui l√≤ng cung c·∫•p kh√≥a API th·ª±c t·∫ø ƒë·ªÉ k√≠ch ho·∫°t AI."

    prompt_for_suggestion = f"{SYSTEM_PROMPT} D·ªØ li·ªáu m√¥i tr∆∞·ªùng hi·ªán t·∫°i: Nhi·ªát ƒë·ªô {temp:.1f}¬∞C, ƒê·ªô ·∫©m {hum:.1f}%, DI {di_index:.2f}. H√£y ƒë∆∞a ra m·ªôt l·ªùi khuy√™n ng·∫Øn g·ªçn (t·ªëi ƒëa 2 c√¢u) v√† tr·ª±c ti·∫øp v·ªÅ h√†nh ƒë·ªông n√™n l√†m."
    
    payload = {
        "contents": [{"parts": [{"text": prompt_for_suggestion}]}],
        "systemInstruction": {"parts": [{"text": SYSTEM_PROMPT}]},
    }
    
    try:
        headers = {'Content-Type': 'application/json'}
        full_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}" 
        
        response = requests.post(full_url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        
        result = response.json()
        suggestion = result.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c g·ª£i √Ω t·ª´ AI.')
        return suggestion
    
    except requests.exceptions.RequestException as e:
        return f"L·ªói g·ªçi Gemini API: {e}. Ki·ªÉm tra API Key v√† k·∫øt n·ªëi m·∫°ng."
    except Exception as e:
        return f"L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi AI: {e}"

def chat_with_gemini(user_prompt):
    """G·ªçi Gemini API cho CH·∫æ ƒê·ªò TR√í CHUY·ªÜN (s·ª≠ d·ª•ng l·ªãch s·ª≠ chat)."""
    if GEMINI_API_KEY == "ƒê·∫∂T KH√ìA API C·ª¶A B·∫†N V√ÄO ƒê√ÇY":
        return "Vui l√≤ng c·∫•u h√¨nh API Key ƒë·ªÉ tr√≤ chuy·ªán."
    
    # Th√™m d·ªØ li·ªáu m√¥i tr∆∞·ªùng m·ªõi nh·∫•t v√†o ng·ªØ c·∫£nh tr√≤ chuy·ªán
    latest_data_context = (
        f"Ng·ªØ c·∫£nh hi·ªán t·∫°i (th√¥ng tin m·ªõi nh·∫•t): "
        f"Nhi·ªát ƒë·ªô {st.session_state.latest_climate_data.get('temp', 'N/A')}¬∞C, "
        f"ƒê·ªô ·∫©m {st.session_state.latest_climate_data.get('hum', 'N/A')}%, "
        f"DI {st.session_state.latest_climate_data.get('di', 'N/A'):.2f}. "
    )
    
    # T·∫°o l·ªãch s·ª≠ chat ƒë·ªÉ g·ª≠i l√™n API (bao g·ªìm ng·ªØ c·∫£nh m√¥i tr∆∞·ªùng)
    chat_history = [{"role": m["role"], "parts": m["parts"]} for m in st.session_state.messages]
    
    # Th√™m ng·ªØ c·∫£nh m√¥i tr∆∞·ªùng v√†o ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa user prompt
    if chat_history and chat_history[-1]["role"] == "user":
        current_prompt = chat_history[-1]["parts"][0]["text"]
        chat_history[-1]["parts"][0]["text"] = f"{latest_data_context} Ng∆∞·ªùi d√πng h·ªèi: {current_prompt}"
    
    payload = {
        "contents": chat_history,
        "systemInstruction": {"parts": [{"text": SYSTEM_PROMPT}]},
    }

    try:
        headers = {'Content-Type': 'application/json'}
        full_url = f"{GEMINI_API_URL}?key={GEMINI_API_KEY}" 
        
        response = requests.post(full_url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        
        result = response.json()
        return result.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', 'L·ªói ph·∫£n h·ªìi.')
        
    except requests.exceptions.RequestException as e:
        return f"L·ªói g·ªçi API: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i."
    except Exception as e:
        return "L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi chat."


def fetch_data():
    """L·∫•y d·ªØ li·ªáu JSON t·ª´ ThingSpeak API."""
    try:
        response = requests.get(THING_SPEAK_URL)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn ThingSpeak: {e}")
        return None

def process_data(json_data):
    """X·ª≠ l√Ω d·ªØ li·ªáu JSON th√†nh DataFrame v√† tr√≠ch xu·∫•t d·ªØ li·ªáu m·ªõi nh·∫•t."""
    if not json_data or 'feeds' not in json_data:
        return None, None

    feeds = json_data['feeds']
    df = pd.DataFrame(feeds)
    
    df = df.rename(columns={
        'created_at': 'Th·ªùi gian',
        'field1': 'ƒê·ªô ·∫©m (%)',
        'field2': 'Nhi·ªát ƒë·ªô (¬∞C)',
        'field3': 'Tr·∫°ng th√°i B∆°m'
    })
    
    df['Th·ªùi gian'] = pd.to_datetime(df['Th·ªùi gian'])
    df['Th·ªùi gian'] = df['Th·ªùi gian'].dt.tz_convert(VN_TIMEZONE)
    
    df['ƒê·ªô ·∫©m (%)'] = pd.to_numeric(df['ƒê·ªô ·∫©m (%)'], errors='coerce')
    df['Nhi·ªát ƒë·ªô (¬∞C)'] = pd.to_numeric(df['Nhi·ªát ƒë·ªô (¬∞C)'], errors='coerce')
    df['Tr·∫°ng th√°i B∆°m'] = pd.to_numeric(df['Tr·∫°ng th√°i B∆°m'], errors='coerce')
    
    df = df.sort_values('Th·ªùi gian', ascending=False).reset_index(drop=True)
    latest_data = df.iloc[0] if not df.empty else None
    
    return df, latest_data

# --- GIAO DI·ªÜN STREAMLIT ---

st.title("üí° H·ªá th·ªëng Ph√¢n t√≠ch & G·ª£i √Ω Kh√≠ h·∫≠u D·ª±a tr√™n AI")

# Thi·∫øt l·∫≠p Chatbot ·ªü Sidebar
with st.sidebar:
    st.header("Tr·ª£ l√Ω AI T∆∞ v·∫•n Kh√≠ h·∫≠u")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["parts"][0]["text"])

    # X·ª≠ l√Ω input t·ª´ ng∆∞·ªùi d√πng
    if prompt := st.chat_input("H·ªèi t√¥i v·ªÅ nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m..."):
        # Th√™m prompt c·ªßa user v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "user", "parts": [{"text": prompt}]})
        with st.chat_message("user"):
            st.markdown(prompt)

        # T·∫°o kh√¥ng gian ch·ªù ph·∫£n h·ªìi
        with st.chat_message("model"):
            with st.spinner("AI ƒëang ph√¢n t√≠ch..."):
                # G·ªçi h√†m chat v·ªõi Gemini
                response = chat_with_gemini(prompt)
                st.markdown(response)
        # Th√™m ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠
        st.session_state.messages.append({"role": "model", "parts": [{"text": response}]})


# T·∫°o v√πng ch·ª©a cho d·ªØ li·ªáu c·∫≠p nh·∫≠t
data_placeholder = st.empty()
ai_placeholder = st.empty()
chart_placeholder = st.empty()


# V√≤ng l·∫∑p c·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª± ƒë·ªông
while True:
    json_data = fetch_data()
    df, latest_data = process_data(json_data)

    # --- KHU V·ª∞C HI·ªÇN TH·ªä D·ªÆ LI·ªÜU TH√î V√Ä T√çNH TO√ÅN DI ---
    di_index = None
    with data_placeholder.container():
        st.subheader("üìä D·ªØ li·ªáu C·∫≠p nh·∫≠t M·ªõi nh·∫•t")
        
        if latest_data is None:
            st.warning("Kh√¥ng th·ªÉ t·∫£i ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.")
        else:
            temp = latest_data['Nhi·ªát ƒë·ªô (¬∞C)']
            hum = latest_data['ƒê·ªô ·∫©m (%)']
            pump_status = latest_data['Tr·∫°ng th√°i B∆°m']
            
            di_index = calculate_discomfort_index(temp, hum)
            
            # C·∫≠p nh·∫≠t d·ªØ li·ªáu kh√≠ h·∫≠u m·ªõi nh·∫•t v√†o session state
            st.session_state.latest_climate_data = {"temp": temp, "hum": hum, "di": di_index}

            col1, col2, col3, col4, col5 = st.columns(5)
            
            col1.metric(label="Th·ªùi gian", value=latest_data['Th·ªùi gian'].strftime("%H:%M:%S"))
            col2.metric(label="Nhi·ªát ƒë·ªô (¬∞C)", value=f"{temp:.1f} ¬∞C", delta_color="off")
            col3.metric(label="ƒê·ªô ·∫©m (%)", value=f"{hum:.1f} %", delta_color="off")
            
            status_text = "ON (H√†nh ƒë·ªông)" if pump_status == 1 else "OFF (T·∫°m d·ª´ng)"
            status_color = "inverse" if pump_status == 1 else "off"
            col4.metric(label="Tr·∫°ng th√°i Relay", value=status_text, delta_color=status_color)
            
            if di_index is not None:
                di_color = "inverse" if di_index > 26.5 else "off"
                col5.metric(label="Ch·ªâ s·ªë Kh√≥ ch·ªãu (DI)", value=f"{di_index:.2f}", delta_color=di_color)


    # --- KHU V·ª∞C HI·ªÇN TH·ªä G·ª¢I √ù AI T·ª∞ ƒê·ªòNG ---
    with ai_placeholder.container():
        st.subheader("üí° G·ª£i √Ω T·ªëi ∆∞u Kh√≠ h·∫≠u T·ª± ƒë·ªông")
        
        if latest_data is not None and di_index is not None:
            ai_suggestion = generate_ai_suggestion(temp, hum, di_index)
            
            st.markdown(f"""
                <div style="background-color: #f0f2f6; padding: 15px; border-radius: 10px; border-left: 5px solid #4CAF50;">
                    <p style="font-size: 16px; margin: 0; font-weight: bold;">L·ªùi khuy√™n AI:</p>
                    <p style="font-size: 18px; margin: 5px 0 0 0;">{ai_suggestion}</p>
                </div>
            """, unsafe_allow_html=True)
        else:
             st.info("ƒêang ch·ªù d·ªØ li·ªáu ThingSpeak h·ª£p l·ªá ƒë·ªÉ t·∫°o g·ª£i √Ω AI...")


    # --- KHU V·ª∞C HI·ªÇN TH·ªä BI·ªÇU ƒê·ªí ---
    with chart_placeholder.container():
        st.subheader("üìà Bi·ªÉu ƒë·ªì 20 l·∫ßn ƒë·ªçc g·∫ßn nh·∫•t")
        if df is not None:
            chart_data = df[['Th·ªùi gian', 'Nhi·ªát ƒë·ªô (¬∞C)', 'ƒê·ªô ·∫©m (%)']].set_index('Th·ªùi gian').sort_index()
            st.line_chart(chart_data)
        
        with st.expander("Xem d·ªØ li·ªáu thay ƒë·ªïi c·ª• th·ªÉ"):
            st.dataframe(df)

    # Ch·ªù 5 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i d·ªØ li·ªáu
    time.sleep(5)
